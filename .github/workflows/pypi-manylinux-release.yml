name: PyPi Release

on:
  push:
    branches: [ master ]

# TODO: disable this trigger before merging
  pull_request:
    branches: [ master ]

jobs:

  # create the 'version' file containing the auto-generated package version of all 
  # pypi packages (required to sync artifact versions created by 'pypi_release' tasks)
  gen_package_version:
    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python (with dependencies)
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Create build version
        run: python update_version.py

      - name: Share package verison file with other tasks
        uses: actions/upload-artifact@v2
        with:
          name: package_version
          path: version
          retention-days: 5


  # create pypi binary wheels for all combinations of manylinux build environments
  # and related python target versions of each environment (see 'strategy' section)
  # -> upload the manylinux pypi wheel at the end of each subtask
#  pypi_release:
#    runs-on: 'ubuntu-latest'
#    needs: gen_package_version
#
#    strategy:
#      matrix:
#        manylinux-build-env: [manylinux1, manylinux2010, manylinux2014]
#        manylinux-cpython-version: [cp35-cp35m, cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
#
#    steps:
#      - name: Checkout source code
#        uses: actions/checkout@v2
#
#      - name: Install Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.8'
#
#      - name: Install Python deployment dependencies (pip, twine)
#        run: | 
#          python -m pip install --upgrade pip &&
#          pip install twine
#
#      - name: Download package version file
#        uses: actions/download-artifact@v2
#        with:
#          name: package_version
#
#      - name: Build manylinux wheel
#        run: |
#          docker run -v $PWD/dist:/output \
#                 -v $PWD:/build quay.io/pypa/${{ matrix.manylinux-build-env }}_x86_64 \
#                 bash /build/build_manylinux.sh ${{ matrix.manylinux-cpython-version }}
#
#      - name: Upload PyPi wheel
#        run: |
#          python -m twine upload --repository-url https://upload.pypi.org/legacy/ \
#                 -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} \
#                 dist/chesslib*-${{ matrix.manylinux-build-env }}*.whl

# TODO: bring this to work to attach the PyPi wheel to the GitHub release
# =======================================================================
#      - name: Share manylinux wheel artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: pypi-wheel-${{ matrix.manylinux-build-env }}_x86_64-
#          path: version
#          retention-days: 5


  # Make an auto-generated GitHub release tagging the src version corresponding to the PyPi release
  github_release:
    runs-on: 'ubuntu-latest'
    needs: gen_package_version

    steps:
      - name: Download package version file
        uses: actions/download-artifact@v2
        with:
          name: package_version

      - name: Create VERSION env variable
        id: read_version
        run: |
          echo 'VERSION<<EOF' >> $GITHUB_ENV
          cat version >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Create GitHub release
        id: create_github_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # TODO: figure out why the environment variable is not applied properly
          tag_name: chesslib-v${{ steps.read_version.env.VERSION }}
          release_name: ChessLib ${{ steps.read_version.env.VERSION }}
          body: |
            ### ChessLib ${{ steps.read_version.env.VERSION }}
            
            Highly compatible Python3 lib for efficient chess draw generation.
            
            **Usage:**
            ```sh
            \'pip install chesslib==${{ steps.read_version.env.VERSION }}\'
            ```
            
            ```py
            import chesslib
            ...
            ```
            
            **PyPi:**
            see: https://pypi.org/project/chesslib/${{ steps.read_version.env.VERSION }}
          draft: false
          prerelease: false

# TODO: think of attaching the PyPi wheels also to a corresponding GitHub release
# ===============================================================================
#      - name: Push the PyPi Package as artifact of the new GitHub release
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#          asset_path: ./ChessLib/dist/chesslib-${{ steps.create_release.env.PACKAGE_VERSION }}.linux-x86_64.zip
#          asset_name: chesslib-${{ steps.create_release.env.PACKAGE_VERSION }}.linux-x86_64.zip
#          asset_content_type: application/zip
