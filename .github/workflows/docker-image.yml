name: Docker Image CI

on:
  push:
    branches: [ master ]

#  pull_request:
#    branches: [ master ]

jobs:

# TODO: remove this code when #9 is finished
# ==========================================
#  build_and_test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout source code
#        uses: actions/checkout@v2
#      
#      - name: Build the Docker image
#        run: docker build . --file Dockerfile-dev --tag chesslib-python3:$GITHUB_SHA
#    
#      #- name: Run the unit tests
#      #  run: docker run chesslib-python3:$GITHUB_SHA python3 test.py


  gen_package_version:
    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python (with dependencies)
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Create build version
        run: python update_version.py

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: package_version
          path: version
          retention-days: 5


  pypi_release:
    runs-on: 'ubuntu-latest'

    strategy:
      matrix:
        manylinux-build-env: [manylinux1, manylinux2010, manylinux2014]
        manylinux-cpython-version: [cp35-cp35m, cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python (with dependencies)
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install additional Python Libs required for build / deployment
        run: | 
          python -m pip install --upgrade pip &&
          pip install twine

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: package_version

      - name: Build manylinux1 Python wheels
        run: |
          docker run -v $PWD/dist:/output \
                 -v $PWD:/build quay.io/pypa/${{ matrix.manylinux-build-env }}_x86_64 \
                 bash /build/build_manylinux.sh ${{ matrix.manylinux-cpython-version }}

      - name: Upload PyPi manylinux Python wheels
        run: |
          python -m twine upload --repository-url https://upload.pypi.org/legacy/ \
                 -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} \
                 dist/chesslib*-${{ matrix.manylinux-build-env }}*.whl


  # TODO: add a task building and releasing a minimal docker image based on e.g. Slim or Alpine


# TODO: re-enable this code to fulfill #9
# =======================================
#      - name: Create a new GitHub release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: $(cat version)
#          release_name: ChessLib Release $(cat version)
#          draft: false
#          prerelease: false
#          
#      - name: Push the PyPi Package as artifact of the new GitHub release
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#          asset_path: ./ChessLib/dist/chesslib-${{ steps.create_release.env.PACKAGE_VERSION }}.linux-x86_64.zip
#          asset_name: chesslib-${{ steps.create_release.env.PACKAGE_VERSION }}.linux-x86_64.zip
#          asset_content_type: application/zip
