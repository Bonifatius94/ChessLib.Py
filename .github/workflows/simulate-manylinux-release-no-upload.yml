# ================================================================================= #
# MIT License                                                                       #
#                                                                                   #
# Copyright(c) 2020 Marco TrÃ¶ster                                                   #
#                                                                                   #
# Permission is hereby granted, free of charge, to any person obtaining a copy      #
# of this software and associated documentation files (the "Software"), to deal     #
# in the Software without restriction, including without limitation the rights      #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell         #
# copies of the Software, and to permit persons to whom the Software is             #
# furnished to do so, subject to the following conditions:                          #
#                                                                                   #
# The above copyright notice and this permission notice shall be included in all    #
# copies or substantial portions of the Software.                                   #
#                                                                                   #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,          #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE       #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER            #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,     #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     #
# SOFTWARE.                                                                         #
# ================================================================================= #

name: PyPi Build Wheel Test

on:
  # push:
  #   branches: [ master ]

 pull_request:
   branches: [ master ]

jobs:

  # create the 'version' file containing the auto-generated package version of all 
  # pypi packages (required to sync artifact versions created by 'pypi_release' tasks)
  gen_package_version:
    runs-on: 'ubuntu-latest'

    steps:
      # clone the source code containing the package version generation script
      - name: Checkout source code
        uses: actions/checkout@v2

      # make sure python is set up properly
      - name: Install Python (with dependencies)
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # run the update_version.py script to generate a new
      # package version (referring to seconds since millenium)
      - name: Create build version
        run: python update_version.py

      # upload the version file as an artifact that can be read by
      # other workflow tasks like PyPI release or GitHub release, etc.
      - name: Share package verison file with other tasks
        uses: actions/upload-artifact@v2
        with:
          name: package_version
          path: version
          retention-days: 5

  # create PyPI binary wheels for all combinations of manylinux build environments
  # and related python target versions of each environment (see 'strategy' section)
  # important: don't upload those generated wheels, just simulate if the build process
  #            would work, so there are no pipeline failures when actually releasing
  pypi_release:
    # use the latest ubuntu version (should be 20.04 in 2021)
    runs-on: 'ubuntu-latest'

    # make sure the task creating the release package version is complete
    needs: gen_package_version

    # define build tasks for all combinations of (build-dev, python-version) tuples
    # (can also explicitly exclude specific combinations if required)
    strategy:
      matrix:
        manylinux-build-env: [manylinux1, manylinux2010, manylinux2014]
        manylinux-cpython-version: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]

    steps:
      # clone the source code to be compiled as a manylinux wheel
      - name: Checkout source code
        uses: actions/checkout@v2

      # make sure python is set up properly
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # use the previously created package version (-> all matrix tasks use the same version)
      - name: Download package version file
        uses: actions/download-artifact@v2
        with:
          name: package_version

      # build the source code for a given (build-env, python-version) tuple
      # therefore pull the manylinux docker image and execute the build_manylinux.sh script
      - name: Build manylinux wheel
        run: |
          docker run -v $PWD/dist:/output -v $PWD:/build  \
                 quay.io/pypa/${{ matrix.manylinux-build-env }}_x86_64 \
                 bash /build/build_manylinux.sh ${{ matrix.manylinux-cpython-version }}
